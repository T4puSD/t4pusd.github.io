<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot Reactive on t4pusd | Tech Blog</title>
    <link>https://t4pusd.github.io/tags/spring-boot-reactive/</link>
    <description>Recent content in Spring Boot Reactive on t4pusd | Tech Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Feb 2023 22:08:16 +0600</lastBuildDate>
    <atom:link href="https://t4pusd.github.io/tags/spring-boot-reactive/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot Reactive JWT</title>
      <link>https://t4pusd.github.io/posts/spring_boot_reactive_jwt/</link>
      <pubDate>Mon, 13 Feb 2023 22:08:16 +0600</pubDate>
      <guid>https://t4pusd.github.io/posts/spring_boot_reactive_jwt/</guid>
      <description>&lt;h1 id=&#34;-spring-boot-reactive-with-jwt-authetnication-system&#34;&gt;üçÉ Spring Boot Reactive With JWT Authetnication System&lt;/h1&gt;&#xA;&lt;h2 id=&#34;agenda&#34;&gt;Agenda&lt;/h2&gt;&#xA;&lt;p&gt;In this blog post, we&amp;rsquo;ll explore how to implement JWT authentication and authorization in a reactive way using the Spring Boot Reactive framework. üòÉ&lt;/p&gt;&#xA;&lt;p&gt;Assuming you&amp;rsquo;re already familiar with implementing JWT authentication in a normal Spring Boot application, this blog will focus on the key differences in the implementation for a reactive application.&lt;/p&gt;&#xA;&lt;p&gt;Before we dive into the implementation details, let&amp;rsquo;s quickly review what reactive programming is, what the Spring Boot Reactive framework is, and what JWT authentication is.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
